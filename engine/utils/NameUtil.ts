namespace LUI {
	export class NameUtil {
		
		/**
		 *  @private
		 */
		private static counter:number = 0;
		/**
		 *  Creates a unique name for any Object instance, such as "Button12", by
		 *  combining the unqualified class name with an incrementing counter.
		 *
		 *  @param object Object requiring a name.
		 *
		 *  @return String containing the unique name.
		 */
		public static createUniqueName(object: any): string {
			if (!object)
				return null;

			var name: string = egret.getQualifiedClassName(object);

			// If there is a package name, strip it off.
			var index: number = name.indexOf("::");
			if (index != -1)
				name = name.substr(index + 2);

			// If the class name ends with a digit (which some autogenerated
			// classes do), then append an underscore before appending
			// the counter.
			var charCode: number = name.charCodeAt(name.length - 1);
			if (charCode >= 48 && charCode <= 57)
				name += "_";
			return name + this.counter++;
		}

		/**
		 *  Returns a string, such as
		 *  "MyApplication0.addressForm.lastName.TextField17",
		 *  for a DisplayObject object that indicates its position in the
		 *  hierarchy of DisplayObject objects in an application.
		 *
		 *  @param displayObject A DisplayObject object whose hierarchy in the application
		 *  is desired. 
		 *
		 *  @return String containing the position of <code>displayObject</code> 
		 *  in the hierarchy of DisplayObject objects in an application.
		 */
		public static displayObjectToString(
			displayObject:egret.DisplayObject):string
		{
			var result:string;
			
			// Start at the specified object and walk up the parent chain
			// to build up the string to return.
			try
			{
				for (var o:egret.DisplayObject = displayObject;
					o != null;
					o = o.parent)
				{
					// If this object is in the display tree,
					// stop after we've prepended the topmost Application instance.
					if (o.parent && o.stage && o.parent == o.stage)
					{
						if(result==null)
							result=o.name;
						break;
					}
					
					var s:string = o.name;
					
					
					result = result == null ? s : s + "." + result;
				}
			}
			catch (e)
			{
				// Ignore error and continue with what we have.	
				// We may not have access to our parent if we are loaded into a sandbox.
			}
			return result;
		}
	}
}